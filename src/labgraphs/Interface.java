/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package labgraphs;

import java.awt.Color;
import java.awt.Graphics;
import java.util.LinkedList;

/**
 *
 * @author Santi Mercado
 */
public class Interface extends javax.swing.JFrame {

   boolean addv = false;
   boolean delv = false;
   boolean adda = false;
   boolean dela = false;
   int cont=0;
   Arista atemp;
   Node ntemp;
   LinkedList<Integer> posx;
   LinkedList<Integer> posy;
   //LinkedList<Integer[]> posx2;
   //LinkedList<Integer[]> posy2;
   Grafo gr = new Grafo();
    public Interface() {
        initComponents();
        posx = new LinkedList<Integer>();
        posy = new LinkedList<Integer>();
        //posx2 = new LinkedList<Integer[]>();
        //posy2 = new LinkedList<Integer[]>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        prompt = new javax.swing.JLabel();
        invertice = new javax.swing.JTextField();
        prompt2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        ina = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("SansSerif", 3, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Laboratorio #2 Estructuras de Datos II");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 598, Short.MAX_VALUE)
        );

        jButton1.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        jButton1.setText("Añadir vértice");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        prompt.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        prompt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        invertice.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        invertice.setText("Introduzca el nombre");
        invertice.setMinimumSize(new java.awt.Dimension(80, 24));
        invertice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inverticeActionPerformed(evt);
            }
        });

        prompt2.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        prompt2.setForeground(new java.awt.Color(255, 51, 51));
        prompt2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jButton2.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        jButton2.setText("Eliminar vértice");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        jButton3.setText("Añadir arista");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        jButton4.setText("Eliminar arista");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        ina.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        ina.setText("Introduzca el peso");
        ina.setMinimumSize(new java.awt.Dimension(80, 24));
        ina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1174, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(prompt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(42, 42, 42)
                            .addComponent(invertice, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(48, 48, 48)
                            .addComponent(ina, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(prompt2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1166, Short.MAX_VALUE)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(invertice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton3)
                                .addGap(18, 18, 18)
                                .addComponent(jButton4)))
                        .addGap(18, 32, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(ina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(prompt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(prompt2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
@Override
public void paintComponents(Graphics g){
    this.revalidate();
    if (addv == true){
        boolean draw = true;
        for (int i=0; i<posx.size(); i++) {
            if(jPanel1.getMousePosition().x >= posx.get(i)-50 && jPanel1.getMousePosition().x <= posx.get(i)+50){
               if(jPanel1.getMousePosition().y >= posy.get(i)-50 && jPanel1.getMousePosition().y <= posy.get(i)+50){
                    draw = false; 
                } 
            }
        }
        
        if (draw == true){
            g.setColor(Color.BLUE);
           g.fillOval(jPanel1.getMousePosition().x, jPanel1.getMousePosition().y, 20, 20);
            posx.add(jPanel1.getMousePosition().x);
            posy.add(jPanel1.getMousePosition().y); 
        } else {
            prompt2.setText("No puede añadir un vértice tan cerca de otro. Por favor vuelva a intentarlo");
        }
        addv = false;
        prompt.setText(null);
    }
    
    if (delv == true){
       boolean draw = false;
        for (int i=0; i<posx.size(); i++) {
            if(jPanel1.getMousePosition().x >= posx.get(i)-20 && jPanel1.getMousePosition().x <= posx.get(i)+20){
               if(jPanel1.getMousePosition().y >= posy.get(i)-20 && jPanel1.getMousePosition().y <= posy.get(i)+20){
                    draw = true; 
                    g.setColor(Color.WHITE);
                    g.fillOval(posx.get(i), posy.get(i), 20, 20);
                    for(int z=0; z<gr.aristas.size(); z++){
                        if (gr.aristas.get(z).n1 == gr.vertices.get(i) || gr.aristas.get(z).n2 == gr.vertices.get(i)){
                            if(gr.aristas.get(z).n1 == gr.vertices.get(i)){
                                for (int k=0; k<gr.vertices.size(); k++){
                                    if (gr.vertices.get(k) == gr.aristas.get(z).n2){
                                        g.drawLine(posx.get(i)+8, posy.get(i)+8, posx.get(k)+8, posy.get(k)+8); 
                                        g.fillRect(((posx.get(i)+posx.get(k))/2-15), ((posy.get(i)+posy.get(k))/2-15), 30, 30);
                                        g.setColor(Color.BLUE);
                                        g.fillOval(posx.get(k), posy.get(k), 20, 20);
                                    }
                                }    
                            } else {   
                               for (int k=0; k<gr.vertices.size(); k++){
                                    if (gr.vertices.get(k) == gr.aristas.get(z).n1){
                                        g.drawLine(posx.get(i)+8, posy.get(i)+8, posx.get(k)+8, posy.get(k)+8);
                                        g.fillRect(((posx.get(i)+posx.get(k))/2-15), ((posy.get(i)+posy.get(k))/2-15), 30, 30);
                                        g.setColor(Color.BLUE);
                                        g.fillOval(posx.get(k), posy.get(k), 20, 20);
                                    }
                                }  
                            }
                           
                        }
                        gr.aristas.remove(z);
                    }
                    gr.vertices.remove(i);
                    posx.remove(i);
                    posy.remove(i);
                } 
            }
        }
        
        if (draw == false){
           prompt2.setText("No seleccionó un vértice. Por favor vuelva a intentarlo"); 
        }  
        delv = false; 
        prompt.setText(null);
    }
    
    if ((dela == true || adda == true) && cont == 2){
        if (adda == true){
          g.setColor(Color.BLACK);
        for (int i=0; i< gr.vertices.size(); i++){
            if(gr.aristas.get(gr.aristas.size()-1).n1 == gr.vertices.get(i)){
                for(int j=0; j< gr.vertices.size(); j++){
                    if (gr.aristas.get(gr.aristas.size()-1).n2 == gr.vertices.get(j)){
                        g.drawLine(posx.get(i)+8, posy.get(i)+8, posx.get(j)+8, posy.get(j)+8);
                        g.drawString(ina.getText(), (posx.get(i)+posx.get(j))/2, (posy.get(i)+posy.get(j))/2);
                        g.setColor(Color.BLUE);
                        g.fillOval(posx.get(i), posy.get(i), 20, 20);
                        g.fillOval(posx.get(j), posy.get(j), 20, 20);  
                    }
                }
            }
        }  
        } else {
          for (int i=0; i< gr.vertices.size(); i++){
            if(atemp.n1 == gr.vertices.get(i)){
                for(int j=0; j< gr.vertices.size(); j++){
                    if (atemp.n2 == gr.vertices.get(j)){
                        g.setColor(Color.WHITE);
                        g.drawLine(posx.get(i)+8, posy.get(i)+8, posx.get(j)+8, posy.get(j)+8);
                        g.fillRect(((posx.get(i)+posx.get(j))/2-15), ((posy.get(i)+posy.get(j))/2-15), 30, 30);
                        g.setColor(Color.BLUE);
                        g.fillOval(posx.get(i), posy.get(i), 20, 20);
                        g.fillOval(posx.get(j), posy.get(j), 20, 20);
                        gr.aristas.remove(atemp);
                    }
                }
            }
        }  
    }
        
        prompt.setText(null);
        cont = 0;
        adda = false;
        dela = false;
        atemp = null;
        ntemp = null;
    }
    
    
    
}
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        delv = false;
        adda = false;
        dela = false;
        cont = 0;
        addv = true;
        prompt.setText("Haga click en el lugar donde desea añadir un vértice luego de escribir su nombre");
        prompt2.setText(null);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        if(addv == true){
            if (invertice.getText().isEmpty() != true){
                boolean repeat = false;
                for (int i=0; i<gr.vertices.size(); i++){
                    if (gr.vertices.get(i).nombre.equalsIgnoreCase(invertice.getText())){
                        repeat = true;
                    }
                }
                if (repeat == true){
                   prompt2.setText("Ya existe un vértice con el nombre ingresado. Por favor vuelva a intentarlo");
                   addv = false;
                   prompt.setText(null);
                } else {
                  Node n = new Node(invertice.getText());
                  gr.vertices.add(n);
                  paintComponents(jPanel1.getGraphics());  
                }
                
            } else {
                prompt2.setText("Por favor ingrese el nombre del vértice a añadir y vuelva a intentarlo");
                addv = false;
                prompt.setText(null);
            }
        }
        if(delv==true){
                paintComponents(jPanel1.getGraphics());
             
        }
            if(adda==true || dela == true){
                if(cont==0){
                    boolean encontrado = false;
                    for (int i=0; i<posx.size(); i++) {
                        if(jPanel1.getMousePosition().x >= posx.get(i)-50 && jPanel1.getMousePosition().x <= posx.get(i)+50){
                            if(jPanel1.getMousePosition().y >= posy.get(i)-50 && jPanel1.getMousePosition().y <= posy.get(i)+50){
                                encontrado = true;
                                cont ++;
                                ntemp = gr.vertices.get(i);
                                prompt.setText("Ahora haga click en el otro vértice al que es adyacente la arista");
                            } 
                        }
                    }
                    if (encontrado == false){
                      prompt2.setText("No seleccionó un vértice. Por favor vuelva a intentarlo");
                      prompt.setText(null);
                      cont = 0;
                      adda = false;
                      dela = false;
                    }  
                } else {
                   if (ina.getText().isEmpty() != true || dela == true){
                      if (ina.getText().chars().allMatch(Character :: isDigit) == true || dela == true){
                          boolean encontrado = false;
                        for (int i=0; i<posx.size(); i++) {
                            if(jPanel1.getMousePosition().x >= posx.get(i)-50 && jPanel1.getMousePosition().x <= posx.get(i)+50){
                                if(jPanel1.getMousePosition().y >= posy.get(i)-50 && jPanel1.getMousePosition().y <= posy.get(i)+50){
                                    encontrado = true;
                                    cont++;
                                    if(ntemp == gr.vertices.get(i)){
                                        if (dela == true){
                                           prompt2.setText("Por favor vuelva a intentarlo seleccionando 2 vértices distintos"); 
                                        } else {
                                           prompt2.setText("No se admiten lazos. Por favor vuelva a intentarlo seleccionando 2 vértices distintos"); 
                                        }
                                       
                                       prompt.setText(null);
                                       cont = 0;
                                       adda = false;
                                       dela = false;
                                    } else {
                                        Arista a = new Arista(ntemp, gr.vertices.get(i), Integer.parseInt(ina.getText()));
                                    boolean repetido = false;
                                    int repe = -1;
                                    if (gr.aristas.size() == 0){
                                       gr.aristas.add(a);
                                       paintComponents(jPanel1.getGraphics()); 
                                    } else {
                                       for(int j=0; j<gr.aristas.size(); j++){
                                        if ((gr.aristas.get(j).n1 == a.n1  && gr.aristas.get(j).n2 == a.n2) || (gr.aristas.get(j).n2 == a.n1 && gr.aristas.get(j).n1 == a.n2)){
                                            repetido = true;
                                            repe = j;
                                        }
                                    } 
                                       if(repetido == true){
                                           if(dela == false){
                                            prompt.setText("Ya había una arista entre ambos vértices, se sobreescribió su peso correctamente");
                                            gr.aristas.get(repe).SetPeso(Integer.parseInt(ina.getText()));   
                                           } else {
                                               atemp = gr.aristas.get(repe);
                                              paintComponents(jPanel1.getGraphics()); 
                                           }
                                            
                                        } else {
                                           if (dela == false){
                                              gr.aristas.add(a);
                                              paintComponents(jPanel1.getGraphics()); 
                                           } else {
                                               prompt.setText(null);
                                              prompt2.setText("No existe una arista entre los vértices seleccionados");
                                           }
                                            
                                        }
                                    }
                                    }
                                    
                                    
                                } 
                            }
                        }
                        if (encontrado == false){
                            prompt2.setText("No seleccionó un vértice. Por favor vuelva a intentarlo");
                            prompt.setText(null);
                            cont = 0;
                            adda = false;
                            dela = false;
                        }
                      } else {
                         prompt2.setText("Peso ingresado inválido. Por favor vuelva a intentarlo");
                         prompt.setText(null);
                         cont = 0;
                         adda = false;
                         dela = false;
                      }
                      
                    } else {
                        prompt2.setText("No ingresó el peso de la arista. Por favor vuelva a intentarlo");
                        prompt.setText(null);
                        cont = 0;
                        adda = false;
                        dela = false;
                    } 
                }
            }   
    }//GEN-LAST:event_jPanel1MouseClicked

    private void inverticeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inverticeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inverticeActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        delv = false;
        addv = false;
        cont = 0;
        adda = false;
        dela = false;
        if (posx.size() == 0){
           prompt2.setText("No hay vértices para eliminar");
        } else {
         delv = true;
        prompt.setText("Haga click en el vértice que desea eliminar");
        prompt2.setText(null);    
        }
           
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        delv = false;
        addv = false;
        adda = false;
        dela = false; 
        cont = 0;
        if (gr.vertices.size() < 2){
            prompt2.setText("Necesita al menos 2 vértices para añadir una arista");
        } else {
          adda = true;
        if (cont ==0){
           prompt.setText("Haga click en un vértice al que es adyacente la arista a añadir y digite el peso de la misma");
        }
        
        prompt2.setText(null);  
        }
                
    }//GEN-LAST:event_jButton3ActionPerformed

    private void inaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inaActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        delv = false;
        addv = false;
        adda = false;
        dela = false;
        cont = 0;
        if (gr.aristas.size() == 0){
            prompt2.setText("No hay aristas para eliminar ");
        } else {
           dela = true;
           if (cont ==0){
           prompt.setText("Haga click en un vértice al que es adyacente la arista a eliminar");
        }
        
        prompt2.setText(null); 
        }
       
    }//GEN-LAST:event_jButton4ActionPerformed

    public void Init(){
       
    }
    
    public void Process(){
        if (addv == true){
        boolean draw = true;
        for (int i=0; i<posx.size(); i++) {
            if(jPanel1.getMousePosition().x >= posx.get(i)-50 && jPanel1.getMousePosition().x <= posx.get(i)+50){
               if(jPanel1.getMousePosition().y >= posy.get(i)-50 && jPanel1.getMousePosition().y <= posy.get(i)+50){
                    draw = false; 
                } 
            }
        }
        
        if (draw == true){
            posx.add(jPanel1.getMousePosition().x);
            posy.add(jPanel1.getMousePosition().y); 
        } else {
            prompt2.setText("No puede añadir un vértice tan cerca de otro. Por favor vuelva a intentarlo");
        }
        addv = false;
        prompt.setText(null);
    }
    
    if (delv == true){
       boolean draw = false;
        for (int i=0; i<posx.size(); i++) {
            if(jPanel1.getMousePosition().x >= posx.get(i)-20 && jPanel1.getMousePosition().x <= posx.get(i)+20){
               if(jPanel1.getMousePosition().y >= posy.get(i)-20 && jPanel1.getMousePosition().y <= posy.get(i)+20){
                    draw = true; 
                    for(int z=0; z<gr.aristas.size(); z++){
                        if (gr.aristas.get(z).n1 == gr.vertices.get(i) || gr.aristas.get(z).n2 == gr.vertices.get(i)){
                            if(gr.aristas.get(z).n1 == gr.vertices.get(i)){
                                for (int k=0; k<gr.vertices.size(); k++){
                                    if (gr.vertices.get(k) == gr.aristas.get(z).n2){

                                    }
                                }    
                            } else {   
                               for (int k=0; k<gr.vertices.size(); k++){
                                    if (gr.vertices.get(k) == gr.aristas.get(z).n1){
                                    }
                                }  
                            }
                           
                        }
                        gr.aristas.remove(z);
                    }
                    gr.vertices.remove(i);
                    posx.remove(i);
                    posy.remove(i);
                } 
            }
        }
        
        if (draw == false){
           prompt2.setText("No seleccionó un vértice. Por favor vuelva a intentarlo"); 
        }  
        delv = false; 
        prompt.setText(null);
    }
    
    if ((dela == true || adda == true) && cont == 2){
        if (adda == true){
        for (int i=0; i< gr.vertices.size(); i++){
            if(gr.aristas.get(gr.aristas.size()-1).n1 == gr.vertices.get(i)){
                for(int j=0; j< gr.vertices.size(); j++){
                    if (gr.aristas.get(gr.aristas.size()-1).n2 == gr.vertices.get(j)){

                    }
                }
            }
        }  
        } else {
          for (int i=0; i< gr.vertices.size(); i++){
            if(atemp.n1 == gr.vertices.get(i)){
                for(int j=0; j< gr.vertices.size(); j++){
                    if (atemp.n2 == gr.vertices.get(j)){

                        gr.aristas.remove(atemp);
                    }
                }
            }
        }  
    }
        
        prompt.setText(null);
        cont = 0;
        adda = false;
        dela = false;
        atemp = null;
        ntemp = null;
    }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ina;
    private javax.swing.JTextField invertice;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel prompt;
    private javax.swing.JLabel prompt2;
    // End of variables declaration//GEN-END:variables
}
