/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package labgraphs;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.LinkedList;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 *
 * @author Santi Mercado
 */
public class Interface extends javax.swing.JFrame {

   boolean addv = false;
   boolean delv = false;
   boolean adda = false;
   boolean dela = false;
   boolean cmin = false;
   int cont=0;
   Arista atemp;
   Node ntemp;
   LinkedList<Integer> posx;
   LinkedList<Integer> posy;
   BufferedImage mapa = null;
   //LinkedList<Integer[]> posx2;
   //LinkedList<Integer[]> posy2;
   Grafo gr = new Grafo();
    public Interface() {
        initComponents();
        posx = new LinkedList<Integer>();
        posy = new LinkedList<Integer>();
            try 
        {mapa = ImageIO.read(new File("C:\\Users\\Santi Mercado\\Documents\\NetBeansProjects\\LabGraphs\\src\\Img\\mapafortnite.jpg"));}
    catch (IOException e)
        {e.printStackTrace();}
        //posx2 = new LinkedList<Integer[]>();
        //posy2 = new LinkedList<Integer[]>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        mt = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        prompt = new javax.swing.JLabel();
        invertice = new javax.swing.JTextField();
        prompt2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        ina = new javax.swing.JTextField();
        templabel = new javax.swing.JLabel();
        inv = new javax.swing.JTextField();
        bfs = new javax.swing.JButton();
        dfs = new javax.swing.JButton();
        recorrido = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("SansSerif", 3, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Laboratorio #2 Estructuras de Datos II");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 0, 1180, 47);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        mt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/mapafortnite.jpg"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(mt)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(16, 246, 1160, 600);

        jButton1.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        jButton1.setText("Añadir vértice");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(190, 70, 150, 27);

        prompt.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        prompt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(prompt);
        prompt.setBounds(20, 172, 1166, 25);

        invertice.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        invertice.setText("Introduzca el nombre");
        invertice.setMinimumSize(new java.awt.Dimension(80, 24));
        invertice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inverticeActionPerformed(evt);
            }
        });
        getContentPane().add(invertice);
        invertice.setBounds(30, 70, 147, 24);

        prompt2.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        prompt2.setForeground(new java.awt.Color(255, 51, 51));
        prompt2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(prompt2);
        prompt2.setBounds(20, 210, 1166, 25);

        jButton2.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        jButton2.setText("Eliminar vértice");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(280, 130, 150, 27);

        jButton3.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        jButton3.setText("Añadir arista");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(540, 70, 170, 27);

        jButton4.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        jButton4.setText("Eliminar arista");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4);
        jButton4.setBounds(470, 130, 170, 27);

        ina.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        ina.setText("Introduzca el peso");
        ina.setMinimumSize(new java.awt.Dimension(80, 24));
        ina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inaActionPerformed(evt);
            }
        });
        getContentPane().add(ina);
        ina.setBounds(380, 70, 147, 24);
        getContentPane().add(templabel);
        templabel.setBounds(689, 97, 0, 0);

        inv.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        inv.setText("Introduzca el vértice inicial");
        inv.setMinimumSize(new java.awt.Dimension(80, 24));
        inv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invActionPerformed(evt);
            }
        });
        getContentPane().add(inv);
        inv.setBounds(750, 70, 170, 24);

        bfs.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        bfs.setText("BFS");
        bfs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bfsActionPerformed(evt);
            }
        });
        getContentPane().add(bfs);
        bfs.setBounds(930, 80, 150, 20);

        dfs.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        dfs.setText("DFS");
        dfs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dfsActionPerformed(evt);
            }
        });
        getContentPane().add(dfs);
        dfs.setBounds(930, 60, 150, 20);

        recorrido.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        recorrido.setText("Recorrido Mínimo");
        recorrido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recorridoActionPerformed(evt);
            }
        });
        getContentPane().add(recorrido);
        recorrido.setBounds(680, 130, 170, 27);

        pack();
    }// </editor-fold>//GEN-END:initComponents
 @Override
public void paintComponents(Graphics g){
    this.revalidate(); 
    g.drawImage(mapa, 0, 0, null);
    for(int i=0; i<gr.aristas.size(); i++){
        for (int j=0; j<gr.vertices.size(); j++){
            if (gr.vertices.get(j) == gr.aristas.get(i).n1){
                for(int k=0; k<gr.vertices.size(); k++){
                    if(gr.vertices.get(k) == gr.aristas.get(i).n2){
                        g.setColor(Color.MAGENTA);
                        g.drawLine(posx.get(j)+8, posy.get(j)+8, posx.get(k)+8, posy.get(k)+8);
                        g.drawString(Integer.toString(gr.aristas.get(i).peso), (posx.get(j)+posx.get(k))/2, (posy.get(j)+posy.get(k))/2);
                    }
                }
            }
        }
    }
    
      g.setColor(Color.BLUE);
    for (int i=0; i<gr.vertices.size(); i++){
        g.fillOval(posx.get(i), posy.get(i), 20, 20);
    }
}
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        delv = false;
        adda = false;
        dela = false;
        cont = 0;
        addv = true;
        prompt.setText("Haga click en el lugar donde desea añadir un vértice luego de escribir su nombre");
        prompt2.setText(null);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        if(addv == true){
            if (invertice.getText().isEmpty() != true){
                boolean repeat = false;
                for (int i=0; i<gr.vertices.size(); i++){
                    if (gr.vertices.get(i).nombre.equalsIgnoreCase(invertice.getText())){
                        repeat = true;
                    }
                }
                if (repeat == true){
                   prompt2.setText("Ya existe un vértice con el nombre ingresado. Por favor vuelva a intentarlo");
                   addv = false;
                   prompt.setText(null);
                } else {
                  Node n = new Node(invertice.getText());
                  gr.vertices.add(n);
                  Process();
                  paintComponents(jPanel1.getGraphics());  
                }
                
            } else {
                prompt2.setText("Por favor ingrese el nombre del vértice a añadir y vuelva a intentarlo");
                addv = false;
                prompt.setText(null);
            }
        }
        if(delv==true){
            Process();
                paintComponents(jPanel1.getGraphics());
             
        }
            if(adda==true || dela == true || cmin == true){
                if(cont==0){
                    boolean encontrado = false;
                    for (int i=0; i<posx.size(); i++) {
                        if(jPanel1.getMousePosition().x >= posx.get(i)-50 && jPanel1.getMousePosition().x <= posx.get(i)+50){
                            if(jPanel1.getMousePosition().y >= posy.get(i)-50 && jPanel1.getMousePosition().y <= posy.get(i)+50){
                                encontrado = true;
                                cont ++;
                                ntemp = gr.vertices.get(i);
                                if (cmin == true){
                                    prompt.setText("Ahora haga click en otro vértice que será el punto final");
                                } else {
                                  prompt.setText("Ahora haga click en el otro vértice al que es adyacente la arista");  
                                }
                                
                            } 
                        }
                    }
                    if (encontrado == false){
                      prompt2.setText("No seleccionó un vértice. Por favor vuelva a intentarlo");
                      prompt.setText(null);
                      cont = 0;
                      adda = false;
                      dela = false;
                      cmin = false;
                    }  
                } else {
                   if (ina.getText().isEmpty() != true || dela == true || cmin == true){
                      if (ina.getText().chars().allMatch(Character :: isDigit) == true || dela == true || cmin == true){
                          boolean encontrado = false;
                        for (int i=0; i<posx.size(); i++) {
                            if(jPanel1.getMousePosition().x >= posx.get(i)-50 && jPanel1.getMousePosition().x <= posx.get(i)+50){
                                if(jPanel1.getMousePosition().y >= posy.get(i)-50 && jPanel1.getMousePosition().y <= posy.get(i)+50){
                                    encontrado = true;
                                    cont++;
                                    if(ntemp == gr.vertices.get(i)){
                                        if (dela == true || cmin == true){
                                           prompt2.setText("Por favor vuelva a intentarlo seleccionando 2 vértices distintos"); 
                                        } else {
                                           prompt2.setText("No se admiten lazos. Por favor vuelva a intentarlo seleccionando 2 vértices distintos"); 
                                        }
                                       
                                       prompt.setText(null);
                                       cont = 0;
                                       adda = false;
                                       dela = false;
                                       cmin = false;
                                    } else {
                                        if(cmin == true){
                                          prompt.setText(gr.FloydWarshall(ntemp, gr.vertices.get(i)));
                                          prompt2.setText(null);
                                        } else {
                                        Arista a = new Arista(ntemp, gr.vertices.get(i), Integer.parseInt(ina.getText()));
                                    boolean repetido = false;
                                    int repe = -1;
                                    if (gr.aristas.isEmpty()){
                                       gr.aristas.add(a);
                                       a.n1.adyacentes.add(a.n2);
                                       a.n2.adyacentes.add(a.n1);
                                       Process();
                                       paintComponents(jPanel1.getGraphics()); 
                                    } else {
                                       for(int j=0; j<gr.aristas.size(); j++){
                                        if ((gr.aristas.get(j).n1 == a.n1  && gr.aristas.get(j).n2 == a.n2) || (gr.aristas.get(j).n2 == a.n1 && gr.aristas.get(j).n1 == a.n2)){
                                            repetido = true;
                                            repe = j;
                                        }
                                    } 
                                       if(repetido == true){
                                           if(dela == false){
                                            prompt.setText("Ya había una arista entre ambos vértices, se sobreescribió su peso correctamente");
                                            gr.aristas.get(repe).SetPeso(Integer.parseInt(ina.getText()));   
                                           } else {
                                               atemp = gr.aristas.get(repe);
                                               
                                               Process();
                                              paintComponents(jPanel1.getGraphics()); 
                                           }
                                            
                                        } else {
                                           if (dela == false){
                                              gr.aristas.add(a);
                                              a.n1.adyacentes.add(a.n2);
                                              a.n2.adyacentes.add(a.n1);
                                              Process();
                                              paintComponents(jPanel1.getGraphics()); 
                                           } else {
                                               prompt.setText(null);
                                              prompt2.setText("No existe una arista entre los vértices seleccionados");
                                           }
                                            
                                        }
                                    }
                                    }
                                    
                                    } 
                                } 
                            }
                        }
                        if (encontrado == false){
                            prompt2.setText("No seleccionó un vértice. Por favor vuelva a intentarlo");
                            prompt.setText(null);
                            cont = 0;
                            adda = false;
                            dela = false;
                        }
                      } else {
                         prompt2.setText("Peso ingresado inválido. Por favor vuelva a intentarlo");
                         prompt.setText(null);
                         cont = 0;
                         adda = false;
                         dela = false;
                      }
                      
                    } else {
                        prompt2.setText("No ingresó el peso de la arista. Por favor vuelva a intentarlo");
                        prompt.setText(null);
                        cont = 0;
                        adda = false;
                        dela = false;
                    } 
                }
            }   
    }//GEN-LAST:event_jPanel1MouseClicked

    private void inverticeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inverticeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inverticeActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        delv = false;
        addv = false;
        cont = 0;
        adda = false;
        dela = false;
        cmin = false;
        if (posx.isEmpty()){
           prompt2.setText("No hay vértices para eliminar");
        } else {
         delv = true;
        prompt.setText("Haga click en el vértice que desea eliminar");
        prompt2.setText(null);    
        }
           
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        delv = false;
        addv = false;
        adda = false;
        dela = false; 
        cmin = false;
        cont = 0;
        if (gr.vertices.size() < 2){
            prompt2.setText("Necesita al menos 2 vértices para añadir una arista");
        } else {
          adda = true;
        if (cont ==0){
           prompt.setText("Haga click en un vértice al que es adyacente la arista a añadir y digite el peso de la misma");
        }
        
        prompt2.setText(null);  
        }
                
    }//GEN-LAST:event_jButton3ActionPerformed

    private void inaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inaActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        delv = false;
        addv = false;
        adda = false;
        dela = false;
        cmin = false;
        cont = 0;
        if (gr.aristas.isEmpty()){
            prompt2.setText("No hay aristas para eliminar ");
        } else {
           dela = true;
           if (cont ==0){
           prompt.setText("Haga click en un vértice al que es adyacente la arista a eliminar");
        }
        
        prompt2.setText(null); 
        }
       
    }//GEN-LAST:event_jButton4ActionPerformed

    private void invActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_invActionPerformed

    private void bfsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bfsActionPerformed
        if(gr.vertices.isEmpty()){
            prompt.setText(null);
            prompt2.setText("Por favor añada nodos para poder hacer un recorrido");
        } else {
            prompt2.setText(null);
            prompt.setText(null);
            if(inv.getText().isEmpty()){
                prompt2.setText("Por favor ingrese el vértice inicial y vuelva a intentarlo");
            } else {
                boolean existe = false;
                for (int i=0; i<gr.vertices.size(); i++){
                    if (inv.getText().equalsIgnoreCase(gr.vertices.get(i).nombre)){
                        existe = true;
                        prompt.setText(gr.BFS(i));
                    }
                }
                if(existe == false){
                    prompt2.setText("El vértice ingresado no existe. Por favor vuelva a intentarlo");
                }
            }
        }
    }//GEN-LAST:event_bfsActionPerformed

    private void dfsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dfsActionPerformed
      if(gr.vertices.isEmpty()){
            prompt.setText(null);
            prompt2.setText("Por favor añada nodos para poder hacer un recorrido");
        } else {
            prompt2.setText(null);
            prompt.setText(null);
            if(inv.getText().isEmpty()){
                prompt2.setText("Por favor ingrese el vértice inicial y vuelva a intentarlo");
            } else {
                boolean existe = false;
                for (int i=0; i<gr.vertices.size(); i++){
                    if (inv.getText().equalsIgnoreCase(gr.vertices.get(i).nombre)){
                        existe = true;
                        gr.Clear();
                        gr.DFS(i);
                        prompt.setText(gr.dfsout);
                    }
                }
                if(existe == false){
                    prompt2.setText("El vértice ingresado no existe. Por favor vuelva a intentarlo");
                }
            }
        }  
    }//GEN-LAST:event_dfsActionPerformed

    private void recorridoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recorridoActionPerformed
        delv = false;
        addv = false;
        cont = 0;
        adda = false;
        dela = false;
        cmin = false;
        ntemp = null;
        if (gr.vertices.size() < 1){
            prompt2.setText("Necesita al menos un vértices para buscar un camino mínimo");
        } else {
          cmin = true;
        if (cont ==0){
           gr.Clear();
           gr.LlenarMatrices();
           prompt.setText("Haga click en un vértice que será el punto de partida");
        }
        
        prompt2.setText(null);  
        }
        gr.Clear();
        gr.LlenarMatrices();
        //gr.FloydWarshall();
    }//GEN-LAST:event_recorridoActionPerformed

    
    public void Init(){
       mt.setVisible(true);
    }
    
    public void Process(){
        if (addv == true){
        boolean draw = true;
        for (int i=0; i<posx.size(); i++) {
            if(jPanel1.getMousePosition().x >= posx.get(i)-50 && jPanel1.getMousePosition().x <= posx.get(i)+50){
               if(jPanel1.getMousePosition().y >= posy.get(i)-50 && jPanel1.getMousePosition().y <= posy.get(i)+50){
                    draw = false; 
                } 
            }
        }
        
        if (draw == true){
            posx.add(jPanel1.getMousePosition().x);
            posy.add(jPanel1.getMousePosition().y); 
        } else {
            prompt2.setText("No puede añadir un vértice tan cerca de otro. Por favor vuelva a intentarlo");
        }
        addv = false;
        prompt.setText(null);
    }
    
    if (delv == true){
       boolean draw = false;
        for (int i=0; i<posx.size(); i++) {
            if(jPanel1.getMousePosition().x >= posx.get(i)-20 && jPanel1.getMousePosition().x <= posx.get(i)+20){
               if(jPanel1.getMousePosition().y >= posy.get(i)-20 && jPanel1.getMousePosition().y <= posy.get(i)+20){
                    draw = true; 
                    for(int z=0; z<gr.aristas.size(); z++){
                        if (gr.aristas.get(z).n1 == gr.vertices.get(i) || gr.aristas.get(z).n2 == gr.vertices.get(i)){
                            if(gr.aristas.get(z).n1 == gr.vertices.get(i)){
                                for (int k=0; k<gr.vertices.size(); k++){
                                    if (gr.vertices.get(k) == gr.aristas.get(z).n2){

                                    }
                                }    
                            } else {   
                               for (int k=0; k<gr.vertices.size(); k++){
                                    if (gr.vertices.get(k) == gr.aristas.get(z).n1){
                                    }
                                }  
                            }
                           
                        }
                        gr.aristas.remove(z);
                        gr.aristas.get(z).n2.adyacentes.remove(gr.aristas.get(z).n1);
                        gr.aristas.get(z).n1.adyacentes.remove(gr.aristas.get(z).n2);
                    }
                    gr.vertices.remove(i);
                    posx.remove(i);
                    posy.remove(i);
                } 
            }
        }
        
        if (draw == false){
           prompt2.setText("No seleccionó un vértice. Por favor vuelva a intentarlo"); 
        }  
        delv = false; 
        prompt.setText(null);
    }
    
    if ((dela == true || adda == true) && cont == 2){
        if (adda == true){
        for (int i=0; i< gr.vertices.size(); i++){
            if(gr.aristas.get(gr.aristas.size()-1).n1 == gr.vertices.get(i)){
                for(int j=0; j< gr.vertices.size(); j++){
                    if (gr.aristas.get(gr.aristas.size()-1).n2 == gr.vertices.get(j)){

                    }
                }
            }
        }  
        } else {
          for (int i=0; i< gr.vertices.size(); i++){
            if(atemp.n1 == gr.vertices.get(i)){
                for(int j=0; j< gr.vertices.size(); j++){
                    if (atemp.n2 == gr.vertices.get(j)){
                        atemp.n2.adyacentes.remove(atemp.n1);
                        atemp.n1.adyacentes.remove(atemp.n2);
                        gr.aristas.remove(atemp);
                    }
                }
            }
        }  
    }
        
        prompt.setText(null);
        cont = 0;
        adda = false;
        dela = false;
        atemp = null;
        ntemp = null;
    }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bfs;
    private javax.swing.JButton dfs;
    private javax.swing.JTextField ina;
    private javax.swing.JTextField inv;
    private javax.swing.JTextField invertice;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel mt;
    private javax.swing.JLabel prompt;
    private javax.swing.JLabel prompt2;
    private javax.swing.JButton recorrido;
    private javax.swing.JLabel templabel;
    // End of variables declaration//GEN-END:variables
}
